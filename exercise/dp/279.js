// 279. 完全平方数
// 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

// 给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。

// 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

 

// 示例 1：

// 输入：n = 12
// 输出：3 
// 解释：12 = 4 + 4 + 4
// 示例 2：

// 输入：n = 13
// 输出：2
// 解释：13 = 4 + 9
 
// 提示：

// 1 <= n <= 104
// 题意分析：
// 数字n一定要由完全平方数组成。

// 举个例子。n为13时，在[1,13]之间的平方数有1，4，9。

// 最少个数的完全平方数的组合是4,9，个数是2个。这个是由先选择组成9的情况和组成4的最小个数的和而来。

// 由此可知，最终结果依赖局部结果，可以考虑使用动态规划。

// 尝试推导下动态规划的方程,dp[n]即是要求解的结果。

// 比如对于5来说，可以有1、4这2个完全平方数，也可以由5个1组合成，这里我们选择数量更小的存储。
// dp[i] = Math.min(dp[i],i- j * j)

// 对于n来说平方数的范围是，1~Math.floor(Math.sqrt(n))。
// dp[i] = Math


// corner case n为0 时返回0
/**
 * @param {number} n
 * @return {number}
 */
/**
 * @param {number} n
 * @return {number}
 */
 var numSquares = function (n) {
    const dp = new Array(n+1).fill(0)
    for (let i = 1; i < n+1; i++) {
        dp[i] = i 
        for (let j = 1; i - j * j >=0; j++) {
            dp[i] = Math.min(dp[i],dp[i - j * j] + 1)            
        }
    }
    return dp[n]
};

console.log(numSquares(13));